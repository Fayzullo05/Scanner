#!/usr/bin/env python3

import argparse
import socket
import json
import time
from concurrent.futures import ThreadPoolExecutor, as_completed
import os

# Check if a host is alive
def is_host_alive(ip):
    try:
        socket.create_connection((ip, 80), timeout=3)
        return ip
    except (socket.timeout, socket.error):
        return None

# Scan a single port
def scan_port(ip, port):
    with socket.socket(socket.AF_INET, socket.SOCK_STREAM) as sock:
        sock.settimeout(1)
        try:
            sock.connect((ip, port))
            return port, 'open'
        except:
            return port, 'closed'

# Scan a host for specific ports, showing only open ports if all_ports is True
def scan_host(ip, ports, all_ports=False):
    print(f"Scanning {ip}")
    results = []
    with ThreadPoolExecutor(max_workers=50) as executor:
        future_to_port = {executor.submit(scan_port, ip, port): port for port in ports}
        for future in as_completed(future_to_port):
            port, state = future.result()
            if all_ports and state == 'closed':
                continue  # Skip closed ports if scanning all ports
            results.append((port, state))
            if state == 'open':
                print(f"{port:<5}    {state}")
    print("\n---------------------\n")
    return ip, results

# Parse command-line arguments
def parse_args():
    parser = argparse.ArgumentParser(description="A simple network scanner.")
    parser.add_argument("target", nargs="?", help="IP address, hostname, or CIDR up to /16")
    parser.add_argument("-p", "--ports", help="Comma-separated list of ports to scan")
    parser.add_argument("-p-", "--all-ports", action="store_true", help="Scan all ports (0-65535)")
    parser.add_argument("-f", "--file", help="File containing list of hosts")
    parser.add_argument("-sn", "--scan-network", action="store_true", help="Ping scan for available hosts")
    parser.add_argument("-o", "--output", help="Output file for saving results in JSON format")
    return parser.parse_args()

# Validate ports
def validate_ports(ports):
    try:
        port_list = [int(port) for port in ports.split(',')]
        if any(p <= 0 or p > 65535 for p in port_list):
            raise ValueError
        return port_list
    except ValueError:
        print("Error: Ports should be a comma-separated list of integers between 1 and 65535.")
        return []

# Main function
def main():
    args = parse_args()
    start_time = time.time()

    # Determine target IPs
    if args.file:
        if not os.path.isfile(args.file):
            print(f"Error: File {args.file} does not exist.")
            return
        with open(args.file, 'r') as f:
            targets = [line.strip() for line in f if line.strip()]
        ports = range(1, 65536)  # Scan all ports when reading from file
        all_ports = True
    elif args.target:
        targets = [args.target]
        if args.all_ports:
            ports = range(1, 65536)
            all_ports = True
        elif args.ports:
            ports = validate_ports(args.ports)
            if not ports:
                return
            all_ports = False
        else:
            # Default ports if no ports specified and not reading from file
            ports = [21, 22, 80, 443, 135, 139, 445, 3389]
            all_ports = False
    else:
        print("Error: Please specify a target IP, CIDR range, or a file with hosts.")
        return

    results = {}
    for target in targets:
        try:
            ip = socket.gethostbyname(target)
            ip, scan_result = scan_host(ip, ports, all_ports=all_ports)
            if scan_result:  # Save results
                results[ip] = scan_result
        except socket.gaierror:
            print(f"Error: Unable to resolve {target}")

    end_time = time.time()
    print(f"Scanned {len(targets)} IP addresses in {end_time - start_time:.2f} seconds")

    # Save results to output file if specified
    if args.output:
        try:
            with open(args.output, 'w') as outfile:
                json.dump(results, outfile, indent=4)
            print(f"Results saved to {args.output}")
        except IOError as e:
            print(f"Error: Unable to write to file {args.output}. {e}")

if __name__ == "__main__":
    main()
